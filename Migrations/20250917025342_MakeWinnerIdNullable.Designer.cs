// <auto-generated />
using System;
using AzureAPI.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AzureAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250917025342_MakeWinnerIdNullable")]
    partial class MakeWinnerIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AzureAPI.Objects.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("AzureAPI.Objects.Fight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("BlueBodyStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("BlueClinchStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<int>("BlueCornerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("BlueDistanceStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("BlueGroundStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("BlueHeadStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("BlueKnockdowns")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("BlueLegStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<short>("BlueOdds")
                        .HasColumnType("SMALLINT");

                    b.Property<byte[]>("BlueSubAttempts")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("BlueTakedowns")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<short>("BlueTotalKnockdowns")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("BlueTotalStrikes")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("BlueTotalSubAttempts")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("BlueTotalTakedowns")
                        .HasColumnType("SMALLINT");

                    b.Property<byte>("CardType")
                        .HasColumnType("tinyint");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTitleFight")
                        .HasColumnType("bit");

                    b.Property<byte>("MethodOfVictory")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RedBodyStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("RedClinchStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<int>("RedCornerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RedDistanceStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("RedGroundStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("RedHeadStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("RedKnockdowns")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("RedLegStrikes")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<short>("RedOdds")
                        .HasColumnType("SMALLINT");

                    b.Property<byte[]>("RedSubAttempts")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<byte[]>("RedTakedowns")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("BINARY(5)")
                        .IsFixedLength();

                    b.Property<short>("RedTotalKnockdowns")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RedTotalStrikes")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RedTotalSubAttempts")
                        .HasColumnType("SMALLINT");

                    b.Property<short>("RedTotalTakedowns")
                        .HasColumnType("SMALLINT");

                    b.Property<byte>("Round")
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<byte>("WeightClass")
                        .HasColumnType("tinyint");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("AzureAPI.Objects.Fighter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Height")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte>("LegReach")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Reach")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<byte>("WeightClass")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Fighters");
                });

            modelBuilder.Entity("UFCApi.CSVObjects.EventCsv", b =>
                {
                    b.Property<string>("EventId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventCity")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EventCountry")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EventState")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("EventId");

                    b.HasIndex("EventDate");

                    b.ToTable("EventsCsv");
                });

            modelBuilder.Entity("UFCApi.CSVObjects.FightCsv", b =>
                {
                    b.Property<string>("FightId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EventId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fighter1Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fighter2Id")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FinishRound")
                        .HasColumnType("int");

                    b.Property<string>("FinishTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("NumRounds")
                        .HasColumnType("int");

                    b.Property<string>("Referee")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResultDetails")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Scores1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Scores2")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TimeFormat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("TitleFight")
                        .HasColumnType("bit");

                    b.Property<string>("WeightClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WinnerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FightId");

                    b.HasIndex("EventId");

                    b.HasIndex("Fighter1Id");

                    b.HasIndex("Fighter2Id");

                    b.HasIndex("WinnerId");

                    b.ToTable("FightsCsv");
                });

            modelBuilder.Entity("UFCApi.CSVObjects.FighterCsv", b =>
                {
                    b.Property<string>("FighterId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FighterD")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FighterDob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FighterFName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("FighterHeightCm")
                        .HasColumnType("float");

                    b.Property<int>("FighterL")
                        .HasColumnType("int");

                    b.Property<string>("FighterLName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FighterNcDq")
                        .HasColumnType("int");

                    b.Property<string>("FighterNickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("FighterReachCm")
                        .HasColumnType("float");

                    b.Property<string>("FighterStance")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FighterW")
                        .HasColumnType("int");

                    b.Property<double>("FighterWeightLbs")
                        .HasColumnType("float");

                    b.HasKey("FighterId");

                    b.HasIndex("FighterFName");

                    b.HasIndex("FighterLName");

                    b.ToTable("FightersCsv");
                });

            modelBuilder.Entity("UFCApi.CSVObjects.RoundCsv", b =>
                {
                    b.Property<string>("FightId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(0);

                    b.Property<string>("FighterId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnOrder(1);

                    b.Property<int>("Round")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("BodyStrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("BodyStrikesSucc")
                        .HasColumnType("int");

                    b.Property<int>("ClinchStrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("ClinchStrikesSucc")
                        .HasColumnType("int");

                    b.Property<string>("CtrlTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("DistanceStrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("DistanceStrikesSucc")
                        .HasColumnType("int");

                    b.Property<int>("GroundStrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("GroundStrikesSucc")
                        .HasColumnType("int");

                    b.Property<int>("HeadStrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("HeadStrikesSucc")
                        .HasColumnType("int");

                    b.Property<int>("Knockdowns")
                        .HasColumnType("int");

                    b.Property<int>("LegStrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("LegStrikesSucc")
                        .HasColumnType("int");

                    b.Property<int>("Reversals")
                        .HasColumnType("int");

                    b.Property<int>("StrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("StrikesSucc")
                        .HasColumnType("int");

                    b.Property<int>("SubmissionAtt")
                        .HasColumnType("int");

                    b.Property<int>("TakedownAtt")
                        .HasColumnType("int");

                    b.Property<int>("TakedownSucc")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrikesAtt")
                        .HasColumnType("int");

                    b.Property<int>("TotalStrikesSucc")
                        .HasColumnType("int");

                    b.HasKey("FightId", "FighterId", "Round");

                    b.HasIndex("FighterId");

                    b.ToTable("RoundsCsv");
                });

            modelBuilder.Entity("UFCApi.CSVObjects.FightCsv", b =>
                {
                    b.HasOne("UFCApi.CSVObjects.EventCsv", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UFCApi.CSVObjects.FighterCsv", "Fighter1")
                        .WithMany()
                        .HasForeignKey("Fighter1Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UFCApi.CSVObjects.FighterCsv", "Fighter2")
                        .WithMany()
                        .HasForeignKey("Fighter2Id")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UFCApi.CSVObjects.FighterCsv", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Event");

                    b.Navigation("Fighter1");

                    b.Navigation("Fighter2");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("UFCApi.CSVObjects.RoundCsv", b =>
                {
                    b.HasOne("UFCApi.CSVObjects.FightCsv", "Fight")
                        .WithMany()
                        .HasForeignKey("FightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UFCApi.CSVObjects.FighterCsv", "Fighter")
                        .WithMany()
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fight");

                    b.Navigation("Fighter");
                });
#pragma warning restore 612, 618
        }
    }
}
